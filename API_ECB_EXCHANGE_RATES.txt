import pandas as pd
import requests
from io import StringIO

def get_all_ecb_exchange_rates(base_currency='EUR', start=None, end=None, frequency='D'):
    """
    Scarica TUTTE le valute disponibili dalla BCE con TUTTI i metadati
    
    Parametri:
    ----------
    base_currency : str (default 'EUR')
        Valuta di riferimento (es. 'EUR', 'USD')
    start : str (optional)
        Data iniziale 'YYYY-MM-DD'
    end : str (optional)
        Data finale 'YYYY-MM-DD'
    frequency : str (default 'D')
        'D' giornaliero, 'M' mensile
    
    Restituisce:
    ------------
    DataFrame con tutte le serie storiche e metadati completi
    """
    base_url = "https://data-api.ecb.europa.eu/service/data/EXR"
    series_id = f"{frequency}..{base_currency}.SP00.A"  # Tutte le valute
    
    # Costruisce la query
    params = {
        'format': 'csvdata',
        'startPeriod': start,
        'endPeriod': end
    }
    # Rimuove i parametri None
    params = {k: v for k, v in params.items() if v is not None}
    
    try:
        # Effettua la richiesta
        response = requests.get(f"{base_url}/{series_id}", params=params)
        response.raise_for_status()
        
        # Legge il CSV
        df = pd.read_csv(StringIO(response.text), comment='#')
        df.columns = [c.strip() for c in df.columns]
        
        # Standardizza i nomi delle colonne
        col_mapping = {
            'TIME_PERIOD': 'date',
            'CURRENCY': 'target_currency',
            'OBS_VALUE': 'exchange_rate',
            'FREQ': 'frequency',
            'CURRENCY_DENOM': 'base_currency',
            'EXR_TYPE': 'rate_type',
            'EXR_SUFFIX': 'suffix',
            'OBS_STATUS': 'status',
            'OBS_CONF': 'confidence',
            'OBS_PRE_BREAK': 'pre_break',
            'OBS_COM': 'comments'
        }
        
        # Rinomina le colonne disponibili
        df = df.rename(columns={k: v for k, v in col_mapping.items() if k in df.columns})
        
        # Conversione tipi
        if 'date' in df.columns:
            df['date'] = pd.to_datetime(df['date'])
        if 'exchange_rate' in df.columns:
            df['exchange_rate'] = pd.to_numeric(df['exchange_rate'], errors='coerce')
        
        # Aggiunge timestamp di scaricamento
        df['download_timestamp'] = pd.Timestamp.now()
        
        return df.sort_values(['target_currency', 'date']).reset_index(drop=True)
    
    except Exception as e:
        print(f"Errore durante il download: {str(e)}")
        return pd.DataFrame()

# Esempio d'uso completo
if __name__ == "__main__":
    # Scarica tutti i dati disponibili (pu√≤ richiedere tempo)
    all_rates = get_all_ecb_exchange_rates(
        base_currency='EUR',
        start='2000-01-01',  # Opzionale: rimuovere per tutta la storia
        frequency='D'         # 'M' per dati mensili
    )
    
    if not all_rates.empty:
        print(f"Scaricati {len(all_rates)} records")
        print("Valute disponibili:", all_rates['target_currency'].unique())
        print("\nEsempio dei dati:")
        print(all_rates.head(10))
    else:
        print("Nessun dato scaricato")
