import pandas as pd
import requests

# Estrazione dati
def fetch_wb_data(country='MLT', symbol=True):
    if symbol is True:
        SS = ['♂','♀']
    else:
        SS = ['Male','Female']	
    print(f"++ ADOPTED {SS}")
    indicators = {"SP.POP.TOTL.MA.IN": SS[0],"SP.POP.TOTL.FE.IN": SS[1]}	
    df_list = []
    for indicator, label in indicators.items():
        url = f"http://api.worldbank.org/v2/country/{country}/indicator/{indicator}?format=json&per_page=100"
        data = requests.get(url).json()[1]
        temp_df = pd.DataFrame([(d['date'], float(d['value'])) for d in data], columns=['Year', label])
        df_list.append(temp_df)
    return pd.merge(df_list[0], df_list[1], on='Year'), SS

population, SS = fetch_wb_data('MLT',False)
print(population.head())


import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sm
from statsmodels.stats.proportion import proportions_ztest

def analyze_population(data, SS):
    # Check column names
    S0 = SS[1]  # Females
    S1 = SS[0]  # Males
    if S0 not in data.columns or S1 not in data.columns:
        raise ValueError(f"Columns {S0} or {S1} not found in DataFrame.")
    # Ensure Year is numeric
    if not np.issubdtype(data['Year'].dtype, np.number):
        data['Year'] = pd.to_numeric(data['Year'], errors='coerce')  # Convert to numeric, invalid -> NaN
    # Calculate Ratio (Males / (Males + Females))
    data['Ratio'] = data[S1] / (data[S1] + data[S0])
    
    # Drop rows with NaN (if any conversion failed)
    data = data.dropna(subset=['Year', 'Ratio'])
    # --- Z-TEST ---
    total_male = data[S1].sum()
    total_female = data[S0].sum()
    count = np.array([total_male])
    nobs = np.array([total_male + total_female])
    z_stat, p_value = proportions_ztest(count, nobs, value=0.5)
    print(f"Test Z: p-value = {float(p_value):.4f}")
    # --- OLS REGRESSION ---
    X = sm.add_constant(data['Year'])  # Add intercept
    y = data['Ratio']
    
    # Ensure X and y are numeric (convert if needed)
    X = np.asarray(X, dtype=np.float64)
    y = np.asarray(y, dtype=np.float64)
    
    model = sm.OLS(y, X).fit()
    print("\nRisultati della regressione OLS:")
    print(model.summary())
    # --- PLOT ---
    plt.figure(figsize=(10, 6))
    plt.plot(data['Year'], data['Ratio'], 'bo', label='Rapporto Maschi/Femmine')
    plt.plot(data['Year'], model.predict(X), 'r--', label='Regressione OLS')
    plt.title('Andamento del Rapporto Maschi/Femmine nel Tempo')
    plt.xlabel('Anno')
    plt.ylabel('Rapporto Maschi/Femmine')
    plt.grid(True)
    plt.legend()
    plt.show()
    return z_stat, float(p_value), model.summary()

# Esempio di chiamata (assicurati che `population` e `SS` siano definiti)
z_stat, p_value, ols_summary = analyze_population(population, SS)
